#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('OillingProject:server');
var http = require('http');
var socketio = require('socket.io');
var mysql = require('mysql');
var io;
var emailcheck = 0; //중복이메일 체크

var db = mysql.createConnection({
  host : '210.118.74.149',
  port : 3306,
  user : 'root',
  password : 'tony0606',
  database : 'opdb'
});
db.connect(function(err){ //db연결에러시 출력
  if (err) console.log(err)
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function(){
  console.log("server start port: " + port);
});
server.on('error', onError);
server.on('listening', onListening);

io = socketio.listen(server);
io.sockets.on('connection', function (socket) {

  socket.on('emailcheck', function (data, callback) {
    var sql = 'SELECT * FROM user WHERE email = ' + mysql.escape(data);
    db.query(sql, function(err, results) {
      if (!results[0]) {
        emailcheck = 1; // 아이디 없을시 회원가입 가능하게.
        console.log('email 중복 check 가동중');
        callback(true);
      } else {
        emailcheck = 0;
        callback(false);
      }
    })
  })

  socket.on('auth_check', function (data, callback) {
    db.query('SELECT * FROM room WHERE  ridx= '+mysql.escape(data.ridx)+' and User_master = '+mysql.escape(data.uidx), function(error, result) {
     if (result[0]) {// 프로젝트 관리자~
        callback(true);
      }
      else {// 걍 팀원~
        callback(false);
      }
    });

  })

  /*
    socket.on('regist', function (data, callback) {
      var regist = data;
      if (emailcheck == 1) {
        callback(true);
        db.query('INSERT INTO user (email, name, pw, phone) VALUES (?, ?, ?, ?)', [regist['email'], regist['name'], regist['pw'], regist['phone'] ]);
      } else {
        callback(false);
      }
    });
    */

});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
